{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(DT)\n\n\nshinyServer(function(input, output, session){\n  observe({\n  \n    observe({\n      # store the parsed query string \n      query <- parseQueryString(session$clientData$url_search)\n    })\n      \n    # get user directory on the fangorns server\n    # userDir does not change during the entire session\n    username <- query$user\n    userDir <- paste0(\"http://fangorn.colby.edu/disco2/users/\",username)\n    \n    \n    allOrigDataSets_url <- paste0(\"http://fangorn.colby.edu/disco2/users/alloriginal.php?user=\",username)\n    allDataSets_url <- paste0(\"http://fangorn.colby.edu/disco2/users/alldatasets.php?user=\",username)\n    \n    df <- read.csv( allOrigDataSets_url, header=FALSE, stringsAsFactors = FALSE )\n    allOrigDataSets <- c(c(\"None\"), as.vector(unlist(df[\"V1\"])))\n    \n    df <- read.csv( allDataSets_url, header=FALSE, stringsAsFactors = FALSE )\n    allDataSets <- c(\"None\")\n    files <- as.vector(unlist(df[\"V1\"]))\n    for(name in files){\n      allDataSets = c(allDataSets,substr(name,1,nchar(name)-4))\n    }\n    \n    ############## Histogram ###############\n    # update the list of select options for input$dataset_plot\n    observe({\n      updateSelectInput(session, \"dataset_hist\", choices=allDataSets,selected=\"None\")\n    })\n    \n    # reset input settings back to defaults when the data set used for histogram is changed\n    observeEvent(input$dataset_hist,{\n      updateSelectInput(session, \"histVar\", choices=headers_hist())\n    })\n    \n    # return the original dataset name for a selected input$dataset_plot\n    # e.g. \"AustraliaCoast_pca_201707061322\" returns \"AustraliaCoast\"\n    #\"poker_game_pca_201707061322\" returns \"poker_game\"\n    #\"AustraliaCoast\" returns \"AustraliaCoast\"\n    origDataset_hist <- reactive({ \n      # if input$dataset_kmc itself is an original data set\n      if(input$dataset_hist %in% allOrigDataSets){\n        return (input$dataset_hist)\n      }\n      \n      # if input$dataset_plot is an PCA data set, need to extract the name of its original data set \n      else{\n        #split the input string by \"_\" and convert to a vector\n        splited = unlist(strsplit(input$dataset_hist, \"_\")) \n        \n        # remove \"pca\" and time substrings from the vector\n        name = head(splited,-2) \n        \n        # in case the dataset name contains \"_\" and has been seperated \n        if(length(name) > 1){\n          name = paste(name, collapse = \"_\")\n        }\n        \n        \n        return(name)\n      }\n      \n    })\n    \n    data_hist <- reactive({\n      if(input$dataset_hist!=\"None\"){ \n        read.csv(paste(userDir,\"/\",origDataset_hist(),\"/dataset/\",input$dataset_hist,\".csv\",\n                               sep=\"\"))\n      }\n    })\n    \n    headers_hist <- reactive({\n      if(input$dataset_hist!=\"None\"){\n        if(input$dataset_hist %in% allOrigDataSets){\n          # read the type file\n          typeFile = read.csv(paste(userDir,\"/\",origDataset_hist(),\"/\",origDataset_hist(),\n                                    \"_type.csv\", sep=\"\"))\n          \n          numericHeaders <- vector(length=0)\n          for(i in 1:length(names(typeFile))) {\n            if(typeFile[1,i]==\"number\"){\n              numericHeaders <- append(numericHeaders,names(typeFile)[i])\n            }\n          }\n          return(numericHeaders)\n        }\n        else{\n          return(names(data_hist()))\n        }\n      }\n    \n    })\n    \n    output$hist_fn <- renderPrint({\n      if(input$dataset_hist!=\"None\"){\n        h4(input$dataset_hist,align = \"center\")\n      }\n    })\n    \n    output$hist <- renderPlot({\n      # generate bins based on input$bins from ui.R\n  \n      if(input$dataset_hist == \"None\" || !input$histVar %in% headers_hist() ){\n        return()\n      }\n      \n      # draw the histogram with the specified number of bins\n      if (!is.null(input$histVar) && nchar(input$histVar) > 0){\n        x <- data_hist()[, input$histVar]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1) \n        hist(x, breaks = bins, col = 'lightblue', border = 'white',\n             main= paste(\"Distribution of \", input$histVar))\n  \n      }\n      \n      else{\n        return()\n      }\n    })\n    \n    \n    ########### scatterplot ###########\n    \n    \n    # update the list of select options for input$dataset_plot\n    observe({\n      updateSelectInput(session, \"dataset_plot\", choices=allDataSets,selected=\"None\")\n    })\n    \n    # reset input settings back to defaults when the data set used for histogram is changed\n    observeEvent(input$dataset_plot,{\n      updateSelectInput(session, \"plotXVar\", choices=headers_plot())\n      updateSelectInput(session, \"plotYVar\", choices=headers_plot(), selected=headers_plot()[2])\n      updateCheckboxInput(session, \"eckert\", value=FALSE)\n      })\n    \n    origDataset_plot <- reactive({ \n      # if input$dataset_kmc itself is an original data set\n      if(input$dataset_plot %in% allOrigDataSets){\n        return (input$dataset_plot)\n      }\n      \n      # if input$dataset_plot is an PCA data set, need to extract the name of its original data set \n      else{\n        #split the input string by \"_\" and convert to a vector\n        splited = unlist(strsplit(input$dataset_plot, \"_\")) \n        \n        # remove \"pca\" and time substrings from the vector\n        name = head(splited,-2) \n        \n        # in case the dataset name contains \"_\" and has been seperated \n        if(length(name) > 1){\n          name = paste(name, collapse = \"_\")\n        }\n        \n        return(name)\n      }\n      \n    })\n    \n    # read data for simple plotting\n    # origDataset_plot() indicates the subdirectory that contains the data set,\n    # input$dataset_plot indicates the data set name \n    data_plot <- reactive({\n      if(input$dataset_plot!=\"None\"){ \n        data <- read.csv(paste(userDir,\"/\",origDataset_plot(),\"/dataset/\",input$dataset_plot,\".csv\",\n                               sep=\"\"))\n        origData <- read.csv(paste(userDir,\"/\",origDataset_plot(),\"/dataset/\",origDataset_plot(),\".csv\",\n                                   sep=\"\"))\n        \n        if(input$dataset_plot == origDataset_plot()){\n          return(data)\n        }\n        else{\n          return(cbind(data, origData))\n        }\n      }\n    })\n    \n    headers_plot <- reactive({\n      names(data_plot())\n    })\n    \n    output$scatterplot_fn <- renderPrint({\n      if(input$dataset_plot!=\"None\"){\n        h4(input$dataset_plot,align = \"center\")\n      }\n    })\n    \n    output$scatterplot <- renderPlot({\n        if(input$plotXVar %in% headers_plot()==FALSE || \n           input$plotYVar %in% headers_plot()==FALSE){\n          return()\n        }\n        if(!input$eckert){\n          plot( data_plot()[, input$plotXVar], data_plot()[, input$plotYVar],\n                xlab = input$plotXVar, ylab = input$plotYVar)\n        }\n        else{\n          # grab longitude and latitude\n          a <- data_plot()[, input$plotXVar]\n          \n          b <- data_plot()[, input$plotYVar]\n          \n          # convert Longitude from -180 to 180 to -4PI to 4PI\n          rangeA <- range(a)\n          \n          print(rangeA)\n          \n          rangeB <- range(b)\n          \n          print(rangeB)\n          \n          centerline <- mean(rangeA)\n          \n          print(centerline)\n          \n          y <- b * 4.0 * pi / 180.0\n          \n          tmp <- b / 90.0\n          \n          x <- 2 * (1  + sqrt(1 - tmp*tmp)) * (a - centerline) * pi / 180.0\n          \n          print(x)\n          print(y)\n          \n          plot(x, y)\n          \n          #readline(prompt=\"Enter to continue\")\n          \n          #plot(a, b)\n          \n        }\n    })\n    \n    output$plotInfo <- renderText({\n      xy_str <- function(e) {\n        if(is.null(e)) return(\"NULL\\n\")\n        paste0(input$plotXVar, \" = \", round(e$x, 1), \"  \",\n               input$plotYVar, \" = \", round(e$y, 1), \"\\n\")\n      }\n      paste(\"Hover: \", xy_str(input$plot_hover))\n    })\n    \n    ############### View Data ##########\n    \n    # update the list of select options for input$dataset_plot\n    observe({\n      updateSelectInput(session, \"dataset_view\", choices=allDataSets,selected=\"None\")\n    })\n    \n    origDataset_view <- reactive({ \n      # if input$dataset_kmc itself is an original data set\n      if(input$dataset_view %in% allOrigDataSets){\n        return (input$dataset_view)\n      }\n      \n      # if input$dataset_plot is an PCA data set, need to extract the name of its original data set \n      else{\n        #split the input string by \"_\" and convert to a vector\n        splited = unlist(strsplit(input$dataset_view, \"_\")) \n        \n        # remove \"pca\" and time substrings from the vector\n        name = head(splited,-2) \n        \n        # in case the dataset name contains \"_\" and has been seperated \n        if(length(name) > 1){\n          name = paste(name, collapse = \"_\")\n        }\n        \n        return(name)\n      }\n      \n    })\n    \n    data_view <- reactive({\n      if(input$dataset_view!=\"None\"){ \n        read.csv(paste(userDir,\"/\",origDataset_view(),\"/dataset/\",input$dataset_view,\".csv\",\n                               sep=\"\")) \n      }\n    })\n    \n    output$viewData_fn <- renderPrint({\n      if(input$dataset_view!=\"None\"){\n        h4(input$dataset_view,align = \"center\")\n      }\n    })\n    \n    observe({\n      if(input$dataset_view!=\"None\"){ \n        output$dataTable <- DT::renderDataTable(\n          data_view(), options = list(searching = FALSE, scrollX = TRUE) )\n      }\n    })\n    \n  \n    output$summary <- renderPrint({\n      if(input$dataset_view!=\"None\"){ \n        summary(data_view())\n      }\n    })\n      \n  })\n  \n})\n\n",
    "created" : 1498760635700.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2889517774",
    "id" : "D6BB1CE6",
    "lastKnownWriteTime" : 1501341206,
    "last_content_update" : 1501341206706,
    "path" : "~/Dropbox/htdocs/disco2/rshiny/visual/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}